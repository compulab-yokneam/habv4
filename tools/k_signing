#!/bin/bash -ex

function usage(){
cat << eom

Prerequisites:
	Read, Understand & Issue all steps till #2:
https://source.codeaurora.org/external/imx/uboot-imx/plain/doc/imx/habv4/guides/mx8m_mx8mm_secure_boot.txt?h=imx_v2018.03_4.14.98_2.0.0_ga

Description:
	The script issues "2. Authenticating additional boot images" automatically.
	No user interaction is required.

Parameters:
	A Linux Kernel file name must be passed as the only mandatory script parameter.

Usage:
	$1 /path/to/Image
Output:
	/path/to/Image_signed
eom
}

function get_files() {
URL="https://source.codeaurora.org/external/imx/uboot-imx/plain/doc/imx/habv4/csf_examples/additional_images"
FILES=${csfaddfile}
for F in ${FILES};do
	[[ -e in_${F} ]] && continue
	wget ${URL}/${F}?h=imx_v2018.03_4.14.98_2.0.0_ga --output-document=in_${F}
	sed -i 's/\(Blocks = \).*/\1 \\/g;/Blocks/q' in_${F}
done
}

SecureBootPath=${SecureBootPath:-$(pwd)}
CST=${SecureBootPath}/bin/cst

command -v ${CST} &>/dev/null
if [[ $? -ne 0 ]];then
cat << eom
"${CST} - binary is missing, exiting ..."
eom
exit 1
fi

kload=0x40480000
# tload=0x43000000

if [[ -z ${1} || ! -f ${1} ]] ;then
usage $0
exit 1
fi

# [[ ! -f ${1} ]] && exit 2

ifile=$1

# [[ -z ${2} ]] && exit 1
# [[ ! -f ${2} ]] && exit 2
# tfile=$2
# tsize=$(printf 0x%x $(stat -c %s ${tfile}))

padfile=${ifile}_pad
ivtfile=${ifile}_pad_ivt
csffile=${ifile}_csf
ivtbin='_ivt.bin'
csfaddfile='csf_additional_images.txt'
genivt=$(mktemp -u)

signedfile=${ifile}_signed

padsize=0x$(xxd -s 0x10 -g 0x4 -l 0x4 -e -u ${ifile} | awk '$0=$2')
objcopy -I binary -O binary --pad-to ${padsize} --gap-fill=0x00 ${ifile} ${padfile}

ivt_ptr=$(printf 0x%x $((${kload}+${padsize})))
csf_ptr=$(printf 0x%x $((${kload}+${padsize}+0x20)))

cat << eoscript > ${genivt}
#! /usr/bin/perl -w
use strict;
open(my \$out, '>:raw', '${ivtbin}') or die "Unable to open: \$!";
print \$out pack("V", 0x412000D1); # Signature
print \$out pack("V", ${kload}); # Load Address (*load_address)
print \$out pack("V", 0x0);
print \$out pack("V", 0x0);
print \$out pack("V", 0x0);
print \$out pack("V", ${ivt_ptr}); # Self Pointer (*ivt)
print \$out pack("V", ${csf_ptr}); # CSF Pointer (*csf)
print \$out pack("V", 0x0);
close(\$out);
eoscript
chmod a+x ${genivt}
${genivt}

cat ${padfile} ${ivtbin} > ${ivtfile}

ivtsize=$(printf 0x%x $(stat -c %s ${ivtfile}))

BLOCKS="  ${kload} 0x00000000 ${ivtsize} \"${ivtfile}\" "
# As of now the Image file is getting signed only
# BLOCKS+=" , ${tload} 0x00000000 ${tsize} \"${tfile}\" "

get_files

(cat in_${csfaddfile} ; cat <<< ${BLOCKS} ) > ${csfaddfile}

pushd .
cd ${SecureBootPath}
# Must be issued from the SecureBootPath in order to
# be able to get to the all key files described in the input file.
# Otherwise, the input file must be modified.
${CST} --i ${csfaddfile} --o ${csffile}
popd

cat ${ivtfile} ${csffile} > ${signedfile}

rm -rf ${ivtfile} ${ivtbin} ${padfile} ${csffile} ${csfaddfile} in_${csfaddfile} ${genivt}
